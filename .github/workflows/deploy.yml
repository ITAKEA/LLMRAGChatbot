name: Build and Deploy to Azure Linux VM with Docker Compose

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 'Set up Node.js 20'
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v3

      - name: 'Login to Docker Hub'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 'Build & Push hospital_neo4j_etl Image'
        run: |
          cd hospital_neo4j_etl
          docker build . -t clbo/hospital_neo4j_etl:${{ github.sha }}
          docker push clbo/hospital_neo4j_etl:${{ github.sha }}

      - name: 'Build & Push chatbot_api Image'
        run: |
          cd chatbot_api
          docker build . -t clbo/chatbot_api:${{ github.sha }}
          docker push clbo/chatbot_api:${{ github.sha }}

      - name: 'Build & Push chatbot_frontend Image'
        run: |
          cd chatbot_frontend
          docker build . -t clbo/chatbot_frontend:${{ github.sha }}
          docker push clbo/chatbot_frontend:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v3

      - name: 'Install SSH Key'
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: 'Deploy to Azure VM with Docker Compose'
        env:
          VM_USERNAME: azureuser
          VM_PUBLIC_IP: 52.169.211.207
          DOTENV_FILE_CONTENT: ${{ secrets.DOTENV_FILE_CONTENT }}
        run: |
          # Ensure the directory exists on the remote machine
          ssh -o StrictHostKeyChecking=no $VM_USERNAME@$VM_PUBLIC_IP "mkdir -p ~/deployments/myapp/"
          
          # Copy docker-compose.yml
          scp -o StrictHostKeyChecking=no docker-compose.yml $VM_USERNAME@$VM_PUBLIC_IP:~/deployments/myapp/
          
          # Write the .env file content to the remote VM
          ssh -o StrictHostKeyChecking=no $VM_USERNAME@$VM_PUBLIC_IP "echo \"$DOTENV_FILE_CONTENT\" > ~/deployments/myapp/.env"
          
          # Connect to the VM and run docker-compose commands
          ssh -o StrictHostKeyChecking=no $VM_USERNAME@$VM_PUBLIC_IP << EOF
            cd ~/deployments/myapp
            docker-compose pull
            docker-compose up -d --build
            docker-compose ps
          EOF
